<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:mvc="http://www.springframework.org/schema/mvc"  
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
		http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">  
      
    <!-- 启用spring mvc 注解 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean
    -->  
    <mvc:annotation-driven/>  
    

    <!-- ①：对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能-->  
    <context:component-scan base-package="com.ffxl.hi.*" />  

    
    <!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 ,
    				处理请求response返回值，如下配置能正确返回字符串型返回值,如返回值为对象，则自动转为json -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
    <property name="messageConverters">  
        <list>  
            <ref bean="jsonHttpMessageConverter" />  
        </list>  
    </property>  
</bean>  
  
<bean id="jsonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">  
    <property name="supportedMediaTypes">  
        <list>  
            <value>application/json;charset=UTF-8</value>  
        </list>  
    </property>  
</bean> 
	<!-- 
	<bean id="handleAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">  
		  <list>  
		   <ref bean="mappingJacksonHttpMessageConverter" />
		   <ref bean="mappingStringHttpMessageConverter" />
		  </list>  
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" /> 
	<bean id="mappingStringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter" />
     -->
    <!-- ③：对模型视图名称的解析，即在模型视图名称添加前后缀 -->    
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">    
        <property name="prefix" value="/jsp/" />    
        <property name="suffix" value="" />  <!--可为空,方便实现自已的依据扩展名来选择视图解释类的逻辑  -->  
    </bean>    
   <!--  文件上传 -->   
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--  set the max upload size100MB -->
        <property name="maxUploadSize">
            <value>104857600</value>
        </property>
        <property name="maxInMemorySize">
            <value>1024000</value>
        </property>
    </bean>
    
    <!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->  
    <!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->  
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">  
        <property name="exceptionMappings">  
            <props>  
                <!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到jsp/error_fileupload.jsp页面 -->  
                <prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">error_fileupload</prop>  
            </props>  
        </property>  
    </bean>

    <!--配置拦截器, 多个拦截器,顺序执行 -->  
    <mvc:interceptors>    
        <mvc:interceptor>    
            <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controlle-->  
            <mvc:mapping path="/**" />  
            <bean class="com.ffxl.hi.interceptor.PostHeaderInterceptor"></bean>      
        </mvc:interceptor>  
    </mvc:interceptors> 
	 
	 <!-- 所有swagger目录的访问，直接访问location指定的目录 -->
    <mvc:resources mapping="/swagger/**" location="/WEB-INF/swagger/"/>
    <mvc:resources mapping="swagger-ui.html" location="classpath:/META-INF/resources/"/>
	<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/"/>
</beans> 