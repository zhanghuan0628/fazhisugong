<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/cache  
http://www.springframework.org/schema/cache/spring-cache.xsd 
http://www.springframework.org/schema/util  
http://www.springframework.org/schema/util/spring-util.xsd ">


	<aop:aspectj-autoproxy />
	<context:component-scan base-package="com.ffxl.cloud.service" />
	
	<!-- jdbc.properties文件路径 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:jdbc.properties" />
	</bean>
	<!-- <bean id="ApplicationContextUtils" class="com.ffxl.cloud.util.wxmsg.ApplicationContextUtils"
		factory-method="getInstance" lazy-init="false" /> -->
	
	<!-- 数据源的配置 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- data source configuration -->
		<property name="maxActive" value="1000" /><!-- MAX connections --><!-- 最大活动连接 -->
		<property name="initialSize" value="5" /><!-- initial connections --><!-- 初始化连接 -->
		<property name="maxIdle" value="10" /><!-- MAX idle connections --><!-- 最大空闲连接 -->
		<property name="minIdle" value="5" /><!-- MIN idle connections --><!-- 最小空闲连接 -->
		<!--maxWait: 超时等待时间以毫秒为单位 1000等于1秒,下面配置为2分钟--> 
        <property name="maxWait" value="30000"/>
		<!-- 处理mysql 8小时自动断开连接的问题 -->
		<property name="testWhileIdle" value="true" /><!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
		<property name="testOnBorrow" value="false" /><!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.建议false,否则很影响性能 -->
		<property name="testOnReturn" value="false" /><!-- 指明是否在归还到池中前进行检验 -->
		<property name="validationQuery" value="select 1" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" /><!-- 
			每30秒运行一次空闲连接回收器 -->
		<property name="minEvictableIdleTimeMillis" value="1800000" /><!-- 
			池中的连接空闲30分钟后被回收 -->
		<property name="numTestsPerEvictionRun" value="3" /><!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
		<property name="removeAbandoned" value="true" /> <!--是否自动回收超时连接 -->
		<property name="removeAbandonedTimeout" value="180" />  <!--超时时间(以秒数为单位)连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->
	</bean>
	<!--====JDBC事务管理== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 可通过注解控制事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="validate*" read-only="true" />

			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="do*" propagation="REQUIRED" />

			<tx:method name="*" propagation="SUPPORTS" rollback-for="BusinessException" />
		</tx:attributes>
	</tx:advice>

	<aop:config proxy-target-class="true">
		<aop:pointcut id="aspectMethods"
			expression="execution(* com.ffxl.admin.controller.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="aspectMethods" />
	</aop:config>

	<!-- 创建SqlSessionFactory，同时指定数据源 MyBatis sqlSessionFactory 配置 mybatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations">
			<list>
				<value>classpath*:com/ffxl/cloud/mapper/**/*Mapper.xml</value>
				<value>classpath*:com/ffxl/cloud/mapper/ext/**/*Mapper.xml</value>
			</list>
		</property>
		<!-- <property name="typeAliasesPackage" value="com.jw.bean,com.jw.bean.base"></property> -->

	</bean>



	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ffxl.cloud.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="annotationClass" value="org.springframework.stereotype.Repository" />
		<property name="markerInterface" value="com.ffxl.platform.core.GenericMapper" />
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property> 
			<property name="markerInterface" value="com.ffxl.platform.core.GenericMapper" 
			/> -->
	</bean>



	<bean id="LogAspectAdvice" class="com.ffxl.cloud.interceptor.LogAspect" />
	<aop:config proxy-target-class="true">
		<!-- 定义切面 -->
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.ffxl.cloud.service.*Service.*(..)) or execution(* com.ffxl.platform.core.*Service.*(..)) " />
		<!-- 日志处理 -->
		<aop:advisor advice-ref="LogAspectAdvice" pointcut-ref="interceptorPointCuts" />
		<!-- 将事务通知和切面组合 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>


</beans>